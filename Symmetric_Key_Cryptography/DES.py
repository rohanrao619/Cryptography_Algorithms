##key generation
def dropParity(keys_64bits):
    keys_56bits = ""
    PC = [1,2,3,4,5,6,7,9,10,11,12,13,14,15,17,18,19,20,21,22,23,25,26,27,28,29,30,31,33,34,35,36,37,38,39,41,42,43,44,45,56,47,49,50,51,52,53,54,55,57,58,59,60,61,62,63]
    for index in PC:
        keys_56bits+=(keys_64bits[index-1])
    return keys_56bits[:28], keys_56bits[28:]

def compressionBox(k1, k2):
    compressionTable =  [14,17,11,24,1,5, 
            3,28,15,6,21,10, 
            23,19,12,4,26,8, 
            16,7,27,20,13,2, 
            41,52,31,37,47,55, 
            30,40,51,45,33,48, 
            44,49,39,56,34,53, 
            46,42,50,36,29,32]
    key = ""
    mergedKey = k1+k2
    for i in range(48):
        key+=(mergedKey[compressionTable[i]-1])
    return key

def circularLeftShift(bits, numberofbits):
    shiftedbits = bits[numberofbits:] + bits[:numberofbits]
    return shiftedbits

def keyBlock(k1, k2, numberofbits):
    shiftedK1 = circularLeftShift(k1, numberofbits)
    shiftedK2 = circularLeftShift(k2, numberofbits)
    return shiftedK1, shiftedK2

def keyGeneration(key):
    key1, key2 = dropParity(key)
    roundKeys = []
    for i in range(1,17):
        numberofbits = 2
        if i in [1, 2, 9, 16]:
            numberofbits = 1
        key1, key2 = keyBlock(key1, key2, numberofbits)
        roundKeys.append("".join(map(str, (compressionBox(key1, key2)))))
    return roundKeys

##input key : 0 0 0 1 0 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 1 1 1 0 0 1 1 0 0 1 1 0 1 1 1 0 1 1 1 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 1


#desFunction
FUN_P_BOX = [ 16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25]

EXPANSION_TABLE = [32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,
    16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1]

S_BOX = [
             
    [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
     [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
     [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
     [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],
    ],

    [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
     [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
     [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
     [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],
    ],

    [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
     [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
     [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
     [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],
    ],

    [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
     [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
     [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
     [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],
    ],  

    [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
     [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
     [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
     [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],
    ], 

    [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
     [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
     [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
     [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],
    ], 

    [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
     [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
     [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
     [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],
    ],
       
    [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
     [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
     [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
     [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
    ]
    ]

def sbox(input):
    result=''
    for i in range(0,8):
        temp=str(bin(S_BOX[i][ int(input[i*6]+input[(i*6)+5],2) ] [int(input[i*6+1:i*6+5],2)]).replace("0b", "")) 
        result+=('0'*(4-len(temp))+temp)
    return result 
      
def whitener(input,key):
    result=''
    for i in range(len(input)):
        result+= str(int(input[i])^int(key[i]))
    return result


def fun_p_box(input):
    result=''
    for i in range(len(input)):
        result+=input[FUN_P_BOX[i]-1]
    return result

def exp_p_box(input):
    result=''
    for i in range(0,48):
        result+=input[EXPANSION_TABLE[i]-1]
    return result
      
def desFunction(input,key):
    temp1=exp_p_box(input)
    temp2=whitener(temp1,key)
    temp3=sbox(temp2)
    return fun_p_box(temp3)

##    print(desFunction('11110000101010101111000010101010','000110110000001011101111111111000111000001110010' ))

#desElements
def initialPerm(data64):
    initialPermTable = [58,50,42,34,26,18,10,2, 
            60,52,44,36,28,20,12,4, 
            62,54,46,38,30,22,14,6, 
            64,56,48,40,32,24,16,8, 
            57,49,41,33,25,17,9,1, 
            59,51,43,35,27,19,11,3, 
            61,53,45,37,29,21,13,5, 
            63,55,47,39,31,23,15,7]
    permutedData = ""
    for i in initialPermTable:
        permutedData+=(data64[i-1])
    return permutedData

def finalPerm(data64):
    finalPermTable = [40,8,48,16,56,24,64,32, 
            39,7,47,15,55,23,63,31, 
            38,6,46,14,54,22,62,30, 
            37,5,45,13,53,21,61,29, 
            36,4,44,12,52,20,60,28, 
            35,3,43,11,51,19,59,27, 
            34,2,42,10,50,18,58,26, 
            33,1,41,9,49,17,57,25]
    permutedData = ""
    for i in finalPermTable:
        permutedData+=(data64[i-1])
    return permutedData


#Integration
def fiestalRound(left1, right1, key1):
        left2 = right1
        right2 = whitener(left1, desFunction(right1, key1))
        return left2, right2
    
data = input("Enter 64 bit data to be encrypted: ")
key = input("Enter 64 bit key: ")


print('\n\t\t\tENCRYPTION :\n')

data = initialPerm(data)
left = data[:32]
right = data[32:]
keys = keyGeneration(key)
for i in range(16):
          left, right = fiestalRound(left, right, keys[i])
          temp = left
          left = right
          right = temp
          print('Round '+str(i+1)+' : '+left+right)
cipher = left+right
cipher = finalPerm(cipher)
print('\nCipher Text : '+cipher)


##Decryption

print('\n\t\t\tDECRYPTION :\n')

dataC = initialPerm(cipher)
leftC = dataC[:32]
rightC = dataC[32:]
for i in range(15, -1, -1):
          leftC, rightC = fiestalRound(leftC, rightC, keys[i])
          temp = leftC
          leftC = rightC
          rightC = temp
          print('Round '+str(16-i)+' : '+leftC+rightC)
decipher = leftC+rightC
decipher = finalPerm(decipher)
print('\nDeCipher Text : '+decipher)





#TEST CASE
##Enter 64 bit data to be encrypted: 0001101100000010111011111111110001110000011100101100101011001001
##Enter 64 bit key: 0111010110001000111010011110101011001100001111001100110101100111
##
##			ENCRYPTION :
##
##After round 1 : 0100011111110011000111101000110111001100001111001100110101100111
##After round 2 : 0001000011010100011011111011111011001100001111001100110101100111
##After round 3 : 0111111010101110000110001110100011001100001111001100110101100111
##After round 4 : 1101010001010010001000000000100011001100001111001100110101100111
##After round 5 : 1000001011001001110000010001100011001100001111001100110101100111
##After round 6 : 1110000010000110111001011111110011001100001111001100110101100111
##After round 7 : 1011011110000100001010101101100011001100001111001100110101100111
##After round 8 : 1011101000100101101101011101011111001100001111001100110101100111
##After round 9 : 1000010111100010011011001111111111001100001111001100110101100111
##After round 10 : 1000111100111111110110111111001111001100001111001100110101100111
##After round 11 : 0110000110110101010110011110011011001100001111001100110101100111
##After round 12 : 1001000111101000100101101010100111001100001111001100110101100111
##After round 13 : 1001101100001111101000111001110111001100001111001100110101100111
##After round 14 : 1011111110100000000000111010010011001100001111001100110101100111
##After round 15 : 0000010000001000010111000010001011001100001111001100110101100111
##After round 16 : 1110001101001111000100000101100111001100001111001100110101100111
##
##Cipher Text : 0101101101010010101110101011100100100101011000101101101111001000
##
##			DECRYPTION :
##
##After round 1 : 0000010000001000010111000010001011001100001111001100110101100111
##After round 2 : 1011111110100000000000111010010011001100001111001100110101100111
##After round 3 : 1001101100001111101000111001110111001100001111001100110101100111
##After round 4 : 1001000111101000100101101010100111001100001111001100110101100111
##After round 5 : 0110000110110101010110011110011011001100001111001100110101100111
##After round 6 : 1000111100111111110110111111001111001100001111001100110101100111
##After round 7 : 1000010111100010011011001111111111001100001111001100110101100111
##After round 8 : 1011101000100101101101011101011111001100001111001100110101100111
##After round 9 : 1011011110000100001010101101100011001100001111001100110101100111
##After round 10 : 1110000010000110111001011111110011001100001111001100110101100111
##After round 11 : 1000001011001001110000010001100011001100001111001100110101100111
##After round 12 : 1101010001010010001000000000100011001100001111001100110101100111
##After round 13 : 0111111010101110000110001110100011001100001111001100110101100111
##After round 14 : 0001000011010100011011111011111011001100001111001100110101100111
##After round 15 : 0100011111110011000111101000110111001100001111001100110101100111
##After round 16 : 1111110000111001000011001000010111001100001111001100110101100111
##
##DeCipher Text : 0001101100000010111011111111110001110000011100101100101011001001
